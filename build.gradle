import org.apache.tools.ant.filters.ReplaceTokens

/**
 * HOW TO BUILD
 * 
 * To build this web application, you must build the frontend and the backend.
 *
 * FRONTEND BUILD:
 * Nodejs and npm must be globally installed (windows: must be on PATH).
 * Run 'gradle gulp_build' to build frontend (javascript abd sass).
 * 
 * BACKEND BUILD & RUN:
 * See 'https://github.com/gretty-gradle-plugin/gretty' for detailed instructions.
 * User Gradle task 'appRun' to start embedded tomcat and deploy webapp.
 * 
 * CONFIGURATION:
 * Default configuration file can be found at 'src/main/resources/default.properties'.
 * Use configuration file at 'config/config.properties' to override defaults.
 */


buildscript {
    repositories {
        // gradle node/gulp plugin
        maven {
	    	url "https://plugins.gradle.org/m2/"
	    }
	    // gretty, cargo
	    jcenter()
    }
    dependencies {
    	classpath 'org.gretty:gretty:2.2.0'
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
        classpath 'com.bmuschko:gradle-cargo-plugin:2.4'
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.gretty'
apply plugin: 'com.bmuschko.cargo'
apply plugin: 'com.moowork.node'
apply plugin: "com.moowork.gulp"

//apply from: "profiles.gradle"

class Profile {

	String name
	String type
	String warName
	String workspaceLocation
	String provideNativeLibs
	
	Profile(String name) {
	    this.name = name
	}
}

class ProfilesPlugin implements Plugin<Project> {
    void apply(final Project project) {
        NamedDomainObjectContainer<Profile> profileContainer = project.container(Profile)
        project.extensions.add('profiles', profileContainer)
 
        // Simple task to show the Product objects
        // that are created by Gradle using
        // the DSL syntax in our build file.
        project.task('printProfiles') << {
            def profiles = project.extensions.getByName('profiles')
            profiles.all {
                println "$workspaceLocation"
            }
        }
    }
}

apply plugin: ProfilesPlugin

profiles {

   	local {
   		type = "dev"
   		// use default war name
   		workspaceLocation = "$projectDir/gmm-workspace"
   		provideNativeLibs = 'windows-x86_64'
   	}
   	
	testvm {
   		type = "dev"
   		warName = "GMM.war"
   		workspaceLocation = '${catalina.base}/gmm-workspace'
   		provideNativeLibs = "linux-x86_64"
   	}
   	
   	staging {
   		type = "dev"
   		warName = "staging.war"
   		workspaceLocation = '${catalina.base}/gmm-workspace-staging'
   		// native libs are provided
   	}
   	
   	prod {
   		type = "dev"
   		warName = "ROOT.war"
   		workspaceLocation = '${catalina.base}/gmm-workspace'
   		// native libs are provided
   	}
   	
   	ext {
   	    active = local
   	}
}

group = 'de.gothic-reloaded-mod'
version = '0.6.2-SNAPSHOT'

description = "Gothic Mod Manager"

sourceCompatibility = 10
targetCompatibility = 10

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {
	// all
    mavenCentral()
    // gretty
    jcenter()
}
dependencies {

	// Spring 5
	ext.springVersion = '5.0.4.RELEASE'
	ext.springSecVersion = '5.0.3.RELEASE'
	
	compile group: "com.realityinteractive.imageio.tga", name: "undefined"
	
	compile group: 'org.springframework', name: 'spring-context', version: springVersion
    compile group: 'org.springframework', name: 'spring-core', version: springVersion
    compile group: 'org.springframework', name: 'spring-context-support', version: springVersion
    compile group: 'org.springframework', name: 'spring-webmvc', version: springVersion
    compile group: 'org.springframework', name: 'spring-test', version: springVersion
    compile group: 'org.springframework', name: 'spring-beans', version: springVersion
    compile group: 'org.springframework', name: 'spring-messaging', version: springVersion
    compile group: 'org.springframework', name: 'spring-websocket', version: springVersion
    compile group: 'org.springframework.security', name: 'spring-security-core', version: springSecVersion
    compile group: 'org.springframework.security', name: 'spring-security-config', version: springSecVersion
    compile group: 'org.springframework.security', name: 'spring-security-web', version: springSecVersion
    compile group: 'org.springframework.security', name: 'spring-security-taglibs', version: springSecVersion
    compile group: 'org.springframework.security', name: 'spring-security-messaging', version: springSecVersion

	// Libs
    compile group: 'com.google.jimfs', name: 'jimfs', version:'1.1'
    compile group: 'org.tmatesoft.svnkit', name: 'svnkit', version:'1.9.3'
    /* compile(group: 'com.sun.mail', name: 'javax.mail', version:'1.5.3') {
		exclude(module: 'activation')
    } */
    compile group: 'com.google.guava', name: 'guava', version:'18.0'
    compile group: 'joda-time', name: 'joda-time', version:'2.8.1'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version:'2.9.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.9.4'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.3.2'
    compile group: 'org.apache.commons', name: 'commons-collections4', version:'4.1'
    compile group: 'com.thoughtworks.xstream', name: 'xstream', version:'1.4.8'
    compile group: 'org.freemarker', name: 'freemarker', version:'2.3.27-incubating'
    compile group: 'ch.qos.logback', name: 'logback-classic', version:'1.2.3'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version:'1.3.1'
    // think about replacing commons file-upload with servelt 3.0 upload support
    
    compile group: 'org.imgscalr', name: 'imgscalr-lib', version:'4.2'
    compile group: 'org.bytedeco', name: 'javacpp', version: '1.4.2'
    compile group: 'org.bytedeco.javacpp-presets', name: 'opencv', version: '3.4.2-1.4.2'
    def profile = project.profiles.ext.active;
    if (profile.hasProperty('provideNativeLibs')) {
    	compile group: 'org.bytedeco.javacpp-presets', name: 'opencv', version: '3.4.2-1.4.2', classifier: profile.provideNativeLibs
    }
    
    // JavaEE
    compile group: 'javax.servlet', name: 'jstl', version:'1.2'
    
    // Testing
	testCompile group: 'junit', name: 'junit', version:'4.12'
    
    // JavaEE APIs
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'4.0.0'
    providedCompile group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version:'2.3.1'
	providedCompile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    
	// Change gretty tomcat version from 9.0.6 to newer
	def tomcatVersion = '9.0.10'
    gretty(
    	"org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
        "org.apache.tomcat.embed:tomcat-embed-el:${tomcatVersion}",
        "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}",
        "org.apache.tomcat.embed:tomcat-embed-websocket:${tomcatVersion}"
    )
    
}

// #####################
//  Backend Build
// #####################

task printInfo {
	println 'Build Profile: ' + project.profiles.ext.active.name
	println 'Build Version: ' + project.version
}

// context.xml Filtering
task copyMetaInf(type: Copy) {
	// up-to-date for same profile workspace path
	inputs.property('profile', project.profiles.ext.active.workspaceLocation)
	
	from ("$projectDir/src/main/webapp/META-INF-src") {
    	exclude 'context.xml'
    }
    from ("$projectDir/src/main/webapp/META-INF-src") {
    	include 'context.xml'
	    filter(ReplaceTokens, tokens: [
	    	workspaceLocation: project.profiles.ext.active.workspaceLocation
		])
    }
    filteringCharset = 'UTF-8'
	into "$projectDir/src/main/webapp/META-INF"
}

// Resource Filtering
processResources {
	dependsOn copyMetaInf
	// up-to-date for same version & profile
	inputs.property('version', project.version)
	inputs.property('profile', project.profiles.ext.active.type)
	
    with copySpec {
    	from "$projectDir/src/main/resources/meta.properties"
    	expand(
			'gmm_version': project.version,
			'gmm_name': project.description,
			'gmm_profile_type': project.profiles.ext.active.type
		)
    }
}

war {
	exclude '**/META-INF-src'
	def profile = project.profiles.ext.active;
	if (profile.hasProperty('warName')){
		archiveName = profile.warName
	}
}


// Embedded Tomcat/Jetty Configuration
gretty {
	contextPath = '/GMM'
	servletContainer = "tomcat9"
	//serverConfigFile = "tomcat.xml" // Connectors for HTTP2 can be specified in this file
	recompileOnSourceChange = false // call javaCompile to reload or auto reload
	enableNaming = true // enable JNDI in context.xml for embedded tomcat
	
	// gretty container log (has nothing to to with GMM's log)
	logDir = "$projectDir/build"
	logFileName = "gretty"
}

// disallow non-local profiles for appRun
tasks.whenTaskAdded { task ->
		if (task.name == 'appRun') {
		task.doFirst {
			def profile = project.profiles.ext.active.name
			if (profile != 'local') {
				throw new InvalidUserDataException(
					"Expected profile to be set to 'local' for jetty task, but was '" + profile + "'!")
			}
		}
	}
}

cargo {
    containerId = 'tomcat9x'
    port = 8080
    deployable {
        context = '/GMM'
    }
    remote {
        hostname = 'localhost'
        username = 'tomcat'
        password = 'tomcat'
    }
}


// #####################
//  Fontend Build
// #####################

gulp_three.dependsOn 'npmInstall'
gulp_three.dependsOn 'installGulp'

gulp_build_js.dependsOn 'npmInstall'
gulp_build_js.dependsOn 'installGulp'

gulp_build_sass.dependsOn 'npmInstall'
gulp_build_sass.dependsOn 'installGulp'

gulp_build.dependsOn 'npmInstall'
gulp_build.dependsOn 'installGulp'
gulp_build.dependsOn 'gulp_three'

node {
	download = false
	nodeModulesDir = file("$projectDir/src/main/frontend")
}
gulp {
	workDir = file("$projectDir/src/main/frontend")
}